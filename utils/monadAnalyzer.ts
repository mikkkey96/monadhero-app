import { ethers } from 'ethers';

// Monad Testnet RPC URLs (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
const MONAD_RPC_URLS = [
  "https://testnet-rpc.monad.xyz",
  "https://docs-demo.monad-testnet.quiknode.pro/",
  "https://rpc.testnet.monad.xyz"
];

export interface WalletAnalysis {
  address: string;
  transactions: number;
  contracts: number;
  daysActive: number;
  volume: string;
  firstTransaction: number;
  contractTypes: string[];
  averageGasUsed: string;
  balance: string;
  isActive: boolean;
  isRealData: boolean;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å retry (–ò–°–ü–†–ê–í–õ–ï–ù–ê)
async function createProvider(): Promise<ethers.JsonRpcProvider | null> {
  for (const rpcUrl of MONAD_RPC_URLS) {
    try {
      console.log(`üîÑ Trying RPC: ${rpcUrl}`);
      const provider = new ethers.JsonRpcProvider(rpcUrl, undefined, {
        staticNetwork: ethers.Network.from({
          name: "monad-testnet",
          chainId: 10143
        })
      });
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const blockPromise = provider.getBlockNumber();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 5000)
      );
      
      const blockNumber = await Promise.race([blockPromise, timeoutPromise]);
      console.log(`‚úÖ Connected to ${rpcUrl}, block: ${blockNumber}`);
      
      return provider;
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.log(`‚ùå Failed to connect to ${rpcUrl}:`, errorMessage);
      continue;
    }
  }
  
  return null;
}

export async function analyzeWallet(address: string): Promise<WalletAnalysis> {
  console.log('üîç Starting analysis for:', address);
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª—é–±–æ–º—É —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É RPC
    const provider = await createProvider();
    
    if (!provider) {
      throw new Error("All Monad RPC endpoints are unavailable");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    console.log('üìä Fetching real blockchain data...');
    const [balance, transactionCount] = await Promise.all([
      provider.getBalance(address),
      provider.getTransactionCount(address)
    ]);
    
    const balanceInMON = ethers.formatEther(balance);
    console.log('üí∞ Real Balance:', balanceInMON, 'MON');
    console.log('üìà Real Transactions:', transactionCount);
    
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const isActive = transactionCount > 0;
    const estimatedDaysActive = Math.min(Math.max(Math.floor(transactionCount / 2) + 1, 1), 365);
    const estimatedContracts = Math.floor(transactionCount * 0.3);
    
    const getContractTypes = (txCount: number): string[] => {
      const types = [];
      if (txCount >= 10) types.push('DEX');
      if (txCount >= 20) types.push('DeFi');  
      if (txCount >= 50) types.push('NFT');
      if (txCount >= 100) types.push('Gaming');
      if (txCount >= 150) types.push('DAO');
      return types.length > 0 ? types : ['Basic'];
    };

    const realAnalysis: WalletAnalysis = {
      address,
      transactions: transactionCount,
      contracts: estimatedContracts,
      daysActive: estimatedDaysActive,
      volume: balanceInMON,
      firstTransaction: Date.now() - (estimatedDaysActive * 24 * 60 * 60 * 1000),
      contractTypes: getContractTypes(transactionCount),
      averageGasUsed: (21000 + Math.floor(Math.random() * 30000)).toString(),
      balance: balanceInMON,
      isActive,
      isRealData: true
    };

    console.log('‚úÖ SUCCESS! Real blockchain data loaded:', realAnalysis);
    return realAnalysis;

  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('‚ùå Blockchain connection failed:', errorMessage);
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
    const simulatedAnalysis: WalletAnalysis = {
      address,
      transactions: Math.floor(Math.random() * 150) + 25,
      contracts: Math.floor(Math.random() * 20) + 5,
      daysActive: Math.floor(Math.random() * 90) + 14,
      volume: (Math.random() * 25 + 1).toFixed(4),
      firstTransaction: Date.now() - (Math.floor(Math.random() * 90 + 14) * 24 * 60 * 60 * 1000),
      contractTypes: ['DEX', 'DeFi', 'NFT'].slice(0, Math.floor(Math.random() * 3) + 1),
      averageGasUsed: (25000 + Math.floor(Math.random() * 40000)).toString(),
      balance: (Math.random() * 25 + 1).toFixed(4),
      isActive: true,
      isRealData: false
    };
    
    console.log('üé≠ Using simulated data:', simulatedAnalysis);
    return simulatedAnalysis;
  }
}

export function calculateHeroScore(analysis: WalletAnalysis): number {
  let score = 0;
  
  // –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (3 –±–∞–ª–ª–∞ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é)
  score += analysis.transactions * 3;
  
  // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ (8 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç)
  score += analysis.contracts * 8;
  
  // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (2 –±–∞–ª–ª–∞ –∑–∞ –¥–µ–Ω—å)
  score += analysis.daysActive * 2;
  
  // –ë–∞–ª–∞–Ω—Å (15 –±–∞–ª–ª–æ–≤ –∑–∞ MON)
  score += Math.floor(parseFloat(analysis.volume) * 15);
  
  // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (25 –±–∞–ª–ª–æ–≤ –∑–∞ —Ç–∏–ø)
  score += analysis.contractTypes.length * 25;
  
  // –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (analysis.isActive) score += 100;
  
  // –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (analysis.isRealData) score += 200;
  
  return score;
}

export function getTestAddress(): string {
  return '0xC8F64A659edc7c422859d06322Aa879c7F1AcB9b';
}
